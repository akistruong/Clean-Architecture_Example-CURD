// <auto-generated />
using Infrastructure.MySQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.MySQL.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    partial class OrderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Iventory", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("Iventories");

                    b.HasData(
                        new
                        {
                            ID = "25234940-3176-4647-80d1-0a159a298863",
                            ProductID = "c09628ea-441e-4486-a019-e4005e1b1644",
                            Qty = 100
                        },
                        new
                        {
                            ID = "de33bc93-7157-436f-87da-b88dc27b207a",
                            ProductID = "511e3a9e-1cbd-4355-92f4-ff25d838979b",
                            Qty = 50
                        },
                        new
                        {
                            ID = "6aa1576c-6ff0-49f3-bbf6-02fb33905fc7",
                            ProductID = "151987ae-da8c-43a3-9923-faccf5b32b95",
                            Qty = 50
                        });
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmailOrder")
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalOrder")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQty")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.OrderItem", b =>
                {
                    b.Property<string>("ProductID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderID")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "OrderID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsStock")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = "c09628ea-441e-4486-a019-e4005e1b1644",
                            IsStock = true,
                            ProductDescription = "",
                            ProductName = "Quần Đùi Nam Nữ Thun Cotton \r\n                    AmericanStyle Đập Tan Nóng Bức Mặc Nhà, Mặc Làm Quần Ngủ Có Bigsize",
                            ProductPrice = 500000m,
                            Qty = 100
                        },
                        new
                        {
                            ProductID = "511e3a9e-1cbd-4355-92f4-ff25d838979b",
                            IsStock = true,
                            ProductDescription = "Làm ẩm kép để bảo vệ môi, dưỡng ẩm kép, tạo môi mọng nước, trị liệu spa hàng ngày cho môi ",
                            ProductName = "Ong Son Dầu Nước Bóng Thủy Tinh Trong Suốt Son Bóng Sửa Chữa Khô Nứt Lột Chăm Sóc Môi Nữ Toot Môi Dầu",
                            ProductPrice = 300000m,
                            Qty = 50
                        },
                        new
                        {
                            ProductID = "151987ae-da8c-43a3-9923-faccf5b32b95",
                            IsStock = true,
                            ProductDescription = "Quần Short Kaki Nam AVIANO 5 Màu, Quần Đùi Co Giãn Phối Cạp Chun",
                            ProductName = "Quần Short nam AVIANO được làm từ chất liệu kaki mềm có độ đàn hồi, khả năng chịu lực tốt",
                            ProductPrice = 600000m,
                            Qty = 50
                        });
                });

            modelBuilder.Entity("Entities.Iventory", b =>
                {
                    b.HasOne("Entities.Product", "Product")
                        .WithMany("Iventories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.OrderItem", b =>
                {
                    b.HasOne("Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.Navigation("Iventories");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
